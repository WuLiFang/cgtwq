# -*- coding=UTF-8 -*-
# pyright: strict

from __future__ import annotations
from ._filter import Filter
from typing import Any, List, Sequence

class FieldSign:
    value: str
    def __init__(self, s: str) -> None: ...
    def equal(self, v: Any) -> Filter: ...
    def equal_ignore_case(self, v: Any) -> Filter: ...
    def not_equal(self, v: Any) -> Filter: ...
    def less_than(self, v: Any) -> Filter: ...
    def less_equal_than(self, v: Any) -> Filter: ...
    def greater_than(self, v: Any) -> Filter: ...
    def greater_equal_than(self, v: Any) -> Filter: ...
    def like(self, v: str) -> Filter:
        """
        - `%` match zero or many character.
        - `-` match one character
        """
        ...
    def not_like(self, v: str) -> Filter:
        "same syntax as `like`"
    def has(self, v: str) -> Filter: ...
    def has_ignore_case(self, v: str) -> Filter: ...
    def not_has(self, v: str) -> Filter: ...
    def in_(self, v: Sequence[Any]) -> Filter: ...
    def starts_with(self, v: str) -> Filter: ...
    def ends_with(self, v: str) -> Filter: ...
    def is_(self, v: Any) -> Filter:
        "unknown usage"
